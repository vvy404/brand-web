// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Note {
  id   Int    @id @default(autoincrement())
  name String
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  phone        String
  role         String
  roletype     Int
  isSubscribed Boolean  @default(false)
  orders       Order[]
  profile      Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Order {
  id           Int             @id @default(autoincrement())
  user         User            @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime        @default(now())
  paymentAt    DateTime        
  totalPrice   Int
  statusType   Int
  statusText   String
  orderContent OrderCategory[]
}

model OrderCategory {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int
  Product     Product @relation(fields: [productid], references: [id])
  productid   Int
  imageSrc    String
  title       String
  quanity     Int
  color       String
  singlePrice Int
  totalPrice  Int
}

model Product {
  id            Int             @id @default(autoincrement())
  ismainimg     Boolean         @default(false)
  imgSrc        String
  title         String
  price         Int
  type          Int
  typeName      String
  madeof        String
  isInStock     Boolean         @default(true)
  color         ProductColor[]
  isLiked       Boolean         @default(false)
  isNew         Boolean         @default(false)
  stocknum      Int
  createtime    DateTime        @default(now())
  lastviewtime  DateTime        @default(now())
  ProductImg    ProductImg[]
  CartItem      CartItem[]
  ProductSize   ProductSize[]
  OrderCategory OrderCategory[]
}

model ProductSize {
  id        Int        @id @default(autoincrement())
  Product   Product    @relation(fields: [productid], references: [id])
  productid Int
  size      String
  stocknum  Int
  CartItem  CartItem[]
}

model ProductColor {
  id          Int        @id @default(autoincrement())
  product     Product    @relation(fields: [productid], references: [id])
  productid   Int
  color       String
  img         String
  availblenum Int
  CartItem    CartItem[]
}

model ProductImg {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [productid], references: [id])
  productid  Int
  imgSrc     String
  color      String
  ismainpage Boolean @default(false)
}

model MainPageImageConfig {
  id         Int      @id @default(autoincrement())
  imgSrc     String
  btnText    String
  link       String
  createtime DateTime @default(now())
}

model MidPageImageConfig {
  id         Int      @id @default(autoincrement())
  imgSrc     String
  title      String
  link       String
  createtime DateTime @default(now())
}

model CartItem {
  id           Int          @id @default(autoincrement())
  Product      Product      @relation(fields: [productid], references: [id])
  productid    Int
  ProductColor ProductColor @relation(fields: [colorid], references: [id])
  colorid      Int
  ProductSize  ProductSize  @relation(fields: [sizeid], references: [id])
  sizeid       Int
  quantity     Int
  imgSrc       String
  title        String
  madeof       String
  price        Int
  size         String
  color        String
}

model ProductCategoryOverAll {
  id Int @id @default(autoincrement())
  type Int
  typename String
  ProductCategory ProductCategory[]
}

model ProductCategory {
  id Int @id @default(autoincrement())
  ProductCategoryOverAll ProductCategoryOverAll @relation(fields: [productcategoryid], references: [id])
  productcategoryid Int
  type Int
  typename String
}